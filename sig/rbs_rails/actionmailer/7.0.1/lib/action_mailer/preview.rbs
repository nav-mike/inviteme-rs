module ActionMailer
  module Previews
    # :nodoc:
    extend ActiveSupport::Concern

    module ClassMethods
      # Register one or more Interceptors which will be called before mail is previewed.
      def register_preview_interceptors: (*untyped interceptors) -> untyped

      # Unregister one or more previously registered Interceptors.
      def unregister_preview_interceptors: (*untyped interceptors) -> untyped

      # Register an Interceptor which will be called before mail is previewed.
      # Either a class or a string can be passed in as the Interceptor. If a
      # string is passed in it will be constantized.
      def register_preview_interceptor: (untyped interceptor) -> untyped

      # Unregister a previously registered Interceptor.
      # Either a class or a string can be passed in as the Interceptor. If a
      # string is passed in it will be constantized.
      def unregister_preview_interceptor: (untyped interceptor) -> untyped

      private

      def interceptor_class_for: (untyped interceptor) -> untyped
    end
  end

  class Preview
    extend ActiveSupport::DescendantsTracker

    attr_reader params: untyped

    def initialize: (?::Hash[untyped, untyped] params) -> void

    # Returns all mailer preview classes.
    def self.all: () -> untyped

    # Returns the mail object for the given email name. The registered preview
    # interceptors will be informed so that they can transform the message
    # as they would if the mail was actually being delivered.
    def self.call: (untyped email, ?::Hash[untyped, untyped] params) -> untyped

    # Returns all of the available email previews.
    def self.emails: () -> untyped

    # Returns +true+ if the email exists.
    def self.email_exists?: (untyped email) -> untyped

    # Returns +true+ if the preview exists.
    def self.exists?: (untyped preview) -> untyped

    # Find a mailer preview by its underscored class name.
    def self.find: (untyped preview) -> untyped

    # Returns the underscored name of the mailer preview without the suffix.
    def self.preview_name: () -> untyped

    private

    def self.load_previews: () -> untyped

    def self.preview_path: () -> untyped

    def self.show_previews: () -> untyped

    def self.inform_preview_interceptors: (untyped message) -> untyped
  end
end

module ActionMailer
  class Base < AbstractController::Base
    include DeliveryMethods

    include Rescuable

    include Parameterized

    include Previews

    include AbstractController::Rendering

    include AbstractController::Logger

    include AbstractController::Helpers

    include AbstractController::Translation

    include AbstractController::AssetPaths

    include AbstractController::Callbacks

    include AbstractController::Caching

    include ActionView::Layouts

    PROTECTED_IVARS: untyped

    # Register one or more Observers which will be notified when mail is delivered.
    def self.register_observers: (*untyped observers) -> untyped

    # Unregister one or more previously registered Observers.
    def self.unregister_observers: (*untyped observers) -> untyped

    # Register one or more Interceptors which will be called before mail is sent.
    def self.register_interceptors: (*untyped interceptors) -> untyped

    # Unregister one or more previously registered Interceptors.
    def self.unregister_interceptors: (*untyped interceptors) -> untyped

    # Register an Observer which will be notified when mail is delivered.
    # Either a class, string or symbol can be passed in as the Observer.
    # If a string or symbol is passed in it will be camelized and constantized.
    def self.register_observer: (untyped observer) -> untyped

    # Unregister a previously registered Observer.
    # Either a class, string or symbol can be passed in as the Observer.
    # If a string or symbol is passed in it will be camelized and constantized.
    def self.unregister_observer: (untyped observer) -> untyped

    # Register an Interceptor which will be called before mail is sent.
    # Either a class, string or symbol can be passed in as the Interceptor.
    # If a string or symbol is passed in it will be camelized and constantized.
    def self.register_interceptor: (untyped interceptor) -> untyped

    # Unregister a previously registered Interceptor.
    # Either a class, string or symbol can be passed in as the Interceptor.
    # If a string or symbol is passed in it will be camelized and constantized.
    def self.unregister_interceptor: (untyped interceptor) -> untyped

    private

    def self.observer_class_for: (untyped value) -> untyped

    public

    # Returns the name of the current mailer. This method is also being used as a path for a view lookup.
    # If this is an anonymous mailer, this method will return +anonymous+ instead.
    def self.mailer_name: () -> untyped

    # Allows to set the name of current mailer.
    attr_writer self.mailer_name: untyped

    alias self.controller_path self.mailer_name

    # Sets the defaults through app configuration:
    #
    #     config.action_mailer.default(from: "no-reply@example.org")
    #
    # Aliased by ::default_options=
    def self.default: (?untyped? value) -> untyped

    # Allows to set defaults through app configuration:
    #
    #    config.action_mailer.default_options = { from: "no-reply@example.org" }
    alias self.default_options= self.default

    def self.deliver_mail: (untyped mail) { () -> untyped } -> untyped

    # Returns an email in the format "Name <email@example.com>".
    #
    # If the name is a blank string, it returns just the address.
    def self.email_address_with_name: (untyped address, untyped name) -> untyped

    private

    def self.set_payload_for_mail: (untyped payload, untyped mail) -> untyped

    def self.method_missing: (untyped method_name, *untyped args) -> untyped

    def self.respond_to_missing?: (untyped method, ?bool include_all) -> untyped

    public

    def initialize: () -> void

    def process: (untyped method_name, *untyped args) -> untyped

    class NullMail
      # :nodoc:
      def body: () -> ::String

      def header: () -> ::Hash[untyped, untyped]

      def respond_to?: (untyped string, ?bool include_all) -> true

      def method_missing: (*untyped args) -> nil
    end

    # Returns the name of the mailer object.
    def mailer_name: () -> untyped

    # Returns an email in the format "Name <email@example.com>".
    #
    # If the name is a blank string, it returns just the address.
    def email_address_with_name: (untyped address, untyped name) -> untyped

    # Allows you to pass random and unusual headers to the new <tt>Mail::Message</tt>
    # object which will add them to itself.
    #
    #   headers['X-Special-Domain-Specific-Header'] = "SecretValue"
    #
    # You can also pass a hash into headers of header field names and values,
    # which will then be set on the <tt>Mail::Message</tt> object:
    #
    #   headers 'X-Special-Domain-Specific-Header' => "SecretValue",
    #           'In-Reply-To' => incoming.message_id
    #
    # The resulting <tt>Mail::Message</tt> will have the following in its header:
    #
    #   X-Special-Domain-Specific-Header: SecretValue
    #
    # Note about replacing already defined headers:
    #
    # * +subject+
    # * +sender+
    # * +from+
    # * +to+
    # * +cc+
    # * +bcc+
    # * +reply-to+
    # * +orig-date+
    # * +message-id+
    # * +references+
    #
    # Fields can only appear once in email headers while other fields such as
    # <tt>X-Anything</tt> can appear multiple times.
    #
    # If you want to replace any header which already exists, first set it to
    # +nil+ in order to reset the value otherwise another field will be added
    # for the same header.
    def headers: (?untyped? args) -> untyped

    # Allows you to add attachments to an email, like so:
    #
    #  mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')
    #
    # If you do this, then Mail will take the file name and work out the mime type.
    # It will also set the Content-Type, Content-Disposition, Content-Transfer-Encoding
    # and encode the contents of the attachment in Base64.
    #
    # You can also specify overrides if you want by passing a hash instead of a string:
    #
    #  mail.attachments['filename.jpg'] = {mime_type: 'application/gzip',
    #                                      content: File.read('/path/to/filename.jpg')}
    #
    # If you want to use encoding other than Base64 then you will need to pass encoding
    # type along with the pre-encoded content as Mail doesn't know how to decode the
    # data:
    #
    #  file_content = SpecialEncode(File.read('/path/to/filename.jpg'))
    #  mail.attachments['filename.jpg'] = {mime_type: 'application/gzip',
    #                                      encoding: 'SpecialEncoding',
    #                                      content: file_content }
    #
    # You can also search for specific attachments:
    #
    #  # By Filename
    #  mail.attachments['filename.jpg']   # => Mail::Part object or nil
    #
    #  # or by index
    #  mail.attachments[0]                # => Mail::Part (first attachment)
    #
    def attachments: () -> untyped

    class LateAttachmentsProxy < SimpleDelegator
      def inline: () -> untyped

      def []=: (untyped _name, untyped _content) -> untyped

      private

      def _raise_error: () -> untyped
    end

    # The main method that creates the message and renders the email templates. There are
    # two ways to call this method, with a block, or without a block.
    #
    # It accepts a headers hash. This hash allows you to specify
    # the most used headers in an email message, these are:
    #
    # * +:subject+ - The subject of the message, if this is omitted, Action Mailer will
    #   ask the Rails I18n class for a translated +:subject+ in the scope of
    #   <tt>[mailer_scope, action_name]</tt> or if this is missing, will translate the
    #   humanized version of the +action_name+
    # * +:to+ - Who the message is destined for, can be a string of addresses, or an array
    #   of addresses.
    # * +:from+ - Who the message is from
    # * +:cc+ - Who you would like to Carbon-Copy on this email, can be a string of addresses,
    #   or an array of addresses.
    # * +:bcc+ - Who you would like to Blind-Carbon-Copy on this email, can be a string of
    #   addresses, or an array of addresses.
    # * +:reply_to+ - Who to set the Reply-To header of the email to.
    # * +:date+ - The date to say the email was sent on.
    #
    # You can set default values for any of the above headers (except +:date+)
    # by using the ::default class method:
    #
    #  class Notifier < ActionMailer::Base
    #    default from: 'no-reply@test.lindsaar.net',
    #            bcc: 'email_logger@test.lindsaar.net',
    #            reply_to: 'bounces@test.lindsaar.net'
    #  end
    #
    # If you need other headers not listed above, you can either pass them in
    # as part of the headers hash or use the <tt>headers['name'] = value</tt>
    # method.
    #
    # When a +:return_path+ is specified as header, that value will be used as
    # the 'envelope from' address for the Mail message. Setting this is useful
    # when you want delivery notifications sent to a different address than the
    # one in +:from+. Mail will actually use the +:return_path+ in preference
    # to the +:sender+ in preference to the +:from+ field for the 'envelope
    # from' value.
    #
    # If you do not pass a block to the +mail+ method, it will find all
    # templates in the view paths using by default the mailer name and the
    # method name that it is being called from, it will then create parts for
    # each of these templates intelligently, making educated guesses on correct
    # content type and sequence, and return a fully prepared <tt>Mail::Message</tt>
    # ready to call <tt>:deliver</tt> on to send.
    #
    # For example:
    #
    #   class Notifier < ActionMailer::Base
    #     default from: 'no-reply@test.lindsaar.net'
    #
    #     def welcome
    #       mail(to: 'mikel@test.lindsaar.net')
    #     end
    #   end
    #
    # Will look for all templates at "app/views/notifier" with name "welcome".
    # If no welcome template exists, it will raise an ActionView::MissingTemplate error.
    #
    # However, those can be customized:
    #
    #   mail(template_path: 'notifications', template_name: 'another')
    #
    # And now it will look for all templates at "app/views/notifications" with name "another".
    #
    # If you do pass a block, you can render specific templates of your choice:
    #
    #   mail(to: 'mikel@test.lindsaar.net') do |format|
    #     format.text
    #     format.html
    #   end
    #
    # You can even render plain text directly without using a template:
    #
    #   mail(to: 'mikel@test.lindsaar.net') do |format|
    #     format.text { render plain: "Hello Mikel!" }
    #     format.html { render html: "<h1>Hello Mikel!</h1>".html_safe }
    #   end
    #
    # Which will render a +multipart/alternative+ email with +text/plain+ and
    # +text/html+ parts.
    #
    # The block syntax also allows you to customize the part headers if desired:
    #
    #   mail(to: 'mikel@test.lindsaar.net') do |format|
    #     format.text(content_transfer_encoding: "base64")
    #     format.html
    #   end
    #
    def mail: (?::Hash[untyped, untyped] headers) { () -> untyped } -> untyped

    private

    def set_content_type: (untyped m, untyped user_content_type, untyped class_default) -> untyped

    def default_i18n_subject: (?::Hash[untyped, untyped] interpolations) -> untyped

    def self.supports_path?: () -> false

    def apply_defaults: (untyped headers) -> untyped

    def compute_default: (untyped value) -> untyped

    def assign_headers_to_message: (untyped message, untyped headers) -> untyped

    def collect_responses: (untyped headers) { () -> untyped } -> untyped

    def collect_responses_from_block: (untyped headers) { (untyped) -> untyped } -> untyped

    def collect_responses_from_text: (untyped headers) -> ::Array[{ body: untyped, content_type: untyped }]

    def collect_responses_from_templates: (untyped headers) -> untyped

    def each_template: (untyped paths, untyped name) { () -> untyped } -> untyped

    def wrap_inline_attachments: (untyped message) -> untyped

    def create_parts_from_responses: (untyped m, untyped responses) -> untyped

    def insert_part: (untyped container, untyped response, untyped charset) -> untyped

    # This and #instrument_name is for caching instrument
    def instrument_payload: (untyped key) -> { mailer: untyped, key: untyped }

    def instrument_name: () -> "action_mailer"

    def _protected_ivars: () -> untyped
  end
end
